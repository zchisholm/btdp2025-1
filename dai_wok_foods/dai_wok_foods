// Dai Wok Foods

// Secion 1
// Q2 - How many employees are in the company? 
Employees
| count

// Q3 - Each employee at Dai Wok Foods is assigned an IP address. Which employee has the IP address: “192.168.2.191”?
Employees
| where ip_addr == "192.168.2.191"
// Wayne Rydberg -  192.168.2.191 - wayne_rydberg@daiwokfoods.com - warydberg - FRRW-LAPTOP

// Q4 - How many emails did Stuart Carter receive?
let stewie_email =
Employees
| where name == "Stuart Carter"
| distinct email_addr;
Email
| where recipient in (stewie_email)
| count

// Q5 - How many distinct senders were seen in the email logs from siusamteas.com?
Email
| where sender has "siusamteas.com"
| distinct sender

// Q6 - How many unique websites did “Mary Davis” visit?
let mary_ip =
Employees
| where name == "Mary Davis"
| distinct ip_addr;
OutboundNetworkEvents
| where src_ip in (mary_ip)
| distinct url 
| count

// Q7 - How many domains in the PassiveDns records contain the word “legal”?
PassiveDns
| where domain has "legal"
| count

// Q8 - What IPs did the domain “foodadministration-legal-services.com” resolve to (enter any one of them)?
PassiveDns
| where domain has "foodadministration-legal-services.com"
| distinct ip
// 201.216.44.27 192.0.169.28 188.216.230.252 131.162.160.193 206.74.22.230

// Q9 - How many unique URLs were browsed by employees named “Karen”?
let karen_ips =
Employees
| where name has "karen"
| distinct ip_addr;
OutboundNetworkEvents
| where src_ip has_any (karen_ips)
| distinct url
| count

// Q10 - Who is the Chief Executive Officer of Dai Wok Foods? 
Employees
| where role has "Chief Executive"
// Abby Zelda - 192.168.0.49 - abby_zelda@daiwokfoods.com - TSSG-DESKTOP

// Section 2

// Quick notes: Issue sstarted in early april after big food poisoning case. Emails.Delphia Evans got the first email.
//Q1 - What's Delphia's username? Hint: use the Employees table.
Employees
| where name == "Delphia Evans"
// 192.168.0.31 - delphia_evans@daiwokfoods.com - deevans - ABVJ-MACHINE - Restaurant Staff

// Q2 - What's the company domain? 
// in the last quewery
// daiwokfoods.com

// Q3 - What's the hostname of Delphia's computer?  
// In the first query 

// Q4 - What is Delphia's Role at Dai Wok Foods? 
// ditto  

// Q5 - Let's take a look at the SecurityAlerts table for anything related to Delphia's username or host machine. When was the first alert related to Delphia? Right click and copy the information in the timestamp field. 
SecurityAlerts
| where description has "ABVJ-MACHINE" or description has "deevans"
// 2023-04-04T10:14:35Z - EMAIL - med - Employee deevans reported a suspicious email with the subject "[EXTERNAL] Formal action on food poisoning"

// Q6 - What's the full subject line that was listed on this alert? Provide the subject line without the quotes. 
// Found in prev query

// Q7 - Let's go back and check for more of Delphia's information now. What IP address is assigned to her computer? 
// From Query 1

// Q8 - What is Delphia's email address?
// ditto

// Q9 - Let's investigate her emails using the Email table. How many emails did she receive? 
Email
| where recipient == "delphia_evans@daiwokfoods.com"
| count

// Q10 - How many external emails did Delphia receive? 
Email
| where recipient == "delphia_evans@daiwokfoods.com" and sender !has "daiwokfoods.com"

// Q11 - Let's look for the specific email with the subject that was found on Q6 that was sent to Delphia. When was the email sent to her? 
// Using previous query
/// 2023-04-02T20:40:54Z - sender: county.county@yahoo.com - reply_to: complaint_county@gmail.com - https://foodadministration-legal-services.com/share/published/files/lawsuit.xlsx

// Q12 - Who sent the email? 
// ditto  

// Q13 - How many emails did this email address send to Dai Wok Employees?
Email
| where sender == "county.county@yahoo.com"

// Q14 - This is odd. There seems to be a different email addresses in the reply_to email. Let's take the unique reply_to email addresses and find more sender addresses from those. How many emails are there? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
Email
| where reply_to in (sus_senders)

// Q15 - This is odd. There seems to be a different email addresses in the replyto email. Let's take the unique replyto email addresses and find more sender addresses. How many unique sender addresses did you find? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
Email
| where sender in (sus_senders)
| distinct reply_to
| count

// Q16 - (OPTIONAL QUESTION) - How many total emails were sent by this threat actor? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
let all_sus_emails =
Email
| where sender in (sus_senders)
| distinct reply_to;
Email
| where sender in (all_sus_emails)
| count

// Q17 - There's a lot of domains listed in the link column from Q14. How many unique URLs are there? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
Email
| where reply_to in (sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain

// Q18 - Let's check to see if anybody clicked on links from these domains. Search the OutboundNetworkEvents table to see if there are any hits on the domains found in Q17. What is the domain name (not the full link) of the URL found? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
let sus_domains =
Email
| where reply_to in (sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain;
OutboundNetworkEvents
| where url has_any (sus_domains)
| extend extracted_domain = extract(@"https?://([^/]+)", 1, url)
| distinct extracted_domain 
// 192.168.3.86 - 2023-04-03T18:38:38Z - https://complaints-cityofficialsfood.com/search/published/images/images/large_order.xlsx


// Q19 - Who clicked on the link? Provide the full name. 
Employees
| where ip_addr == "192.168.3.86"
// John Garcia - john_garcia@daiwokfoods.com - Logistics Coordinator - LVJW-LAPTOP

// Q20 - What is their role in the company? 
// look up

// Q21 - What is their hostname? 
// look up

// Q22 - Let's take their email address and take a look back at the emails that we've seen from the threat actor on Q14. Do we see their email address in here? Yes / No
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
Email
| where reply_to in (sus_senders)
| where recipient == "john_garcia@daiwokfoods.com"

// Q23 - When did this employee receive the suspicious email? 
// 2023-04-03T18:38:38Z
Email
| where recipient == "john_garcia@daiwokfoods.com"
// 2023-04-03T18:04:56Z

// Q24 - (OPTIONAL QUESTION) - Based on the answer you found in Question 16, how many distinct roles were targeted by the threat actor? 
let sus_senders =
Email
| where sender == "county.county@yahoo.com"
| distinct reply_to;
let all_sus_emails =
Email
| where sender in (sus_senders)
| distinct reply_to;
let victims =
Email
| where sender in (all_sus_emails)
| distinct recipient;
Employees
| where email_addr in (victims)
| distinct role
| count

// Q25 - What's the reply_to email address of the suspicious email found in Q23? 
Email
| where timestamp == "2023-04-03T18:04:56Z"
| distinct reply_to
// 2023-04-03T18:04:56Z
// service_official@yandex.com
// https://complaints-cityofficialsfood.com/search/published/images/images/large_order.xlsx

// Q26 - Using Google or Bing, search for the name of the domain in the email address (do not go to the domain directly). What country is this domain from? 
// Russia

// Q27 - Let's take the domain name from the suspicious email and search for it in the PassiveDns table. How many records are related to that domain?
PassiveDns
| where domain == "complaints-cityofficialsfood.com"

// Q28 - Which IP address was did the domain resolved to at the time of the activity?
// 2023-04-03T18:04:56Z
// Using query from above
// 179.58.169.157

// Q29 - Using a GeoIP service such as MaxMind (https://www.maxmind.com/en/geoip-demo) or Censys (https://search.censys.io), let's look up this IP address. What country does this IP address appear to be located in? 
// https://search.censys.io/hosts/179.58.169.157

// Q30 - Let's check the InboundNetworkEvents table to see if that IP address had browsed around our Dai Wok Foods website before. How many records did you find related to that IP address? Answer 0 if there are none. 
InboundNetworkEvents
| where src_ip == "179.58.169.157"

// Q31 - What was the earliest thing the IP address searched for? Replace %20 with a space. 
// http://daiwokfoods.com/search?query=store%20managers

// Q32 - There were more IP addresses related to the domain from the suspicious email. Let's take all of them and search across the InboundNetworkEvents. How many records total were found?
let bad_ips=
PassiveDns
| where domain == "complaints-cityofficialsfood.com"
| distinct ip;
InboundNetworkEvents
| where src_ip in (bad_ips)

// Q33 - When was the earliest timestamp observed in Q32? 
// 2023-03-26T01:20:14Z - 188.216.230.252 - http://daiwokfoods.com/search?query=store%20locations

// Q34 - Let's check the login attempts from our compromised employee in AuthenticationEvents. How many distinct source IP addresses were used by the employee to log in? 
// jogarcia - 192.168.3.86
AuthenticationEvents
| where username == "jogarcia"
| distinct src_ip

// Q35 - One IP looks like a private (local) IP address. What country is the other IP address from? 
// Using precious query
// 2.20.114.29
// Italy - maxmind not working. Italy not correct but that is what censys provides
// Every tool came up with Italy as the answer, but going thruogh the KC7 discord it looks like this question is bugged. The correct answer is Romania.

// Q36 - How many records in AuthenticationEvents are related to that IP address?
AuthenticationEvents
| where src_ip == "2.20.114.29"
| count 

// Q37 - Let's go back to the suspicious email we first found in Q23. The link field has the domain name we've been tracking but also has a reference to a filename at the end of it. What is it? 
Email
| where recipient == "john_garcia@daiwokfoods.com" and timestamp == "2023-04-03T18:04:56Z"
// https://complaints-cityofficialsfood.com/search/published/images/images/large_order.xlsx

// Q38 - How many emails reference the same filename?  
Email
| where link contains "large_order.xlsx"


// Q39 - Let's search the FileCreationEvents table for this file. How many host machines have this file? 
FileCreationEvents
| where filename == "large_order.xlsx"

// Q40 - Where was this file located on the host machine? Copy and paste the full path. 
// prev query 
// C:\Users\jogarcia\Downloads\large_order.xlsx

// Q41 - When was this file created on the host machine? 
// prev prev query
// 2023-04-03T18:39:12Z

// Q42 - What's the SHA256 hash of this file? 
// b9d3c969135f1e9abe22fd744c691ec1d1bc0853beffe5aed3f8b78b3d738501

// Q43 - Let's use VirusTotal (https://www.virustotal.com/gui/home/search) to search for this SHA256 hash. Were there any results? Yes / No. 
// nope

// Q44 - Let's look at the ProcessEvents table for this host machine. How many records are associated with this compromised host?
ProcessEvents
| where hostname == "LVJW-LAPTOP"
| count

// Q45 - Let's filter starting with the first time we saw the suspicious file created on Q41. What's the name of the file from the process_commandline that occurs not long after the file was created? 
ProcessEvents
| where hostname == "LVJW-LAPTOP"
// wierd cmd.exe /c start %SYSTEMROOT%\system32\WindowsPowerShell\v1.0\powershell.exe -noni -nop -exe bypass -f \\share1\Admin$\c5k3fsys.3bp.ps1

// Q46 - What's the parent_process_hash from Question 45? 
// smae query
// 662124b0c998fd0826c192514b1f57f8002f2ab031996aa6dd7832f561679779

// Q47 - Using VirusTotal, search the parent_process_hash from Q46. What is the popular threat label for this hash?
// https://www.virustotal.com/gui/file/662124b0c998fd0826c192514b1f57f8002f2ab031996aa6dd7832f561679779

// Q48 - What threat actor is this file associated with? 
// searched google

// Q49 - What is the md5 hash of this file?
// its on virus total

// Q50 - The indicator is referenced in a threat report by a well known cybersecurity company. What type of operations did the company mention this threat actor shifted to doing? 
// ransomware reported my Mandiant and Crowd strike. Another name for them is carbon spider


// Section 3
// Q1 - A law enforcement agency warned Dai Wok Foods that they may been targeted by a threat actor. This coincides with a lot of computers at different restaurants sites being locked out recently. The agency said the threat actor may have sent the malware with the file name "Local_County_Updates.xlsx". When was the first time this file was seen? 
Email
| where link contains "Local_County_Updates.xlsx"
// 2023-05-12T09:22:48Z - Sender: restaurant@verizon.com - recipient: doreen_myers@daiwokfoods.com - [EXTERNAL] FW: News: Dai Wok major changes and updates
// Another person also recieved - william_perez@daiwokfoods.com

// Q2 - Who was the email sender? 
// Prev query

// Q3 - Who was the reply_to email address? 
// ditto
// Reply_to: miguel_waters@hoisumsupplies.com

// Q4 - Oh no! Looks like one of our partners may have been affected. Let's investigate our employees and see if they may have clicked on the link. When did the first employee click on the link? 
OutboundNetworkEvents
| where url contains "Local_County_Updates.xlsx"
// Myers - 2023-05-12T10:00:55Z - 192.168.1.176 - http://operations-management.hk/published/share/share/modules/Local_County_Updates.xlsx

// Q5 - What's the role of the employee who clicked on the link? 
Employees
| where ip_addr == "192.168.1.176"
| distinct role

// Q6 - (ADVANCED) Investigate all of the domains and emails associated with the threat actor. When is the first time this threat actor sent an email to Dai Wok Foods?
let sus_senders = dynamic([
    "restaurant@verizon.com",
    "miguel_waters@hoisumsupplies.com"
]);
let other_sus_senders =
Email
| where sender in (sus_senders) or reply_to in (sus_senders)
| distinct sender;
let more_sus_senders =
Email
| where sender in (other_sus_senders) or reply_to in (other_sus_senders)
| distinct sender;
let final_sus =
Email
| where sender in (more_sus_senders) or reply_to in (more_sus_senders)
| distinct sender, reply_to;
let combined_sus_senders =
final_sus
| project Suspect = sender
| union (final_sus | project Suspect = reply_to)
| distinct Suspect;
let sus_domains =
Email
| where sender in (combined_sus_senders) or reply_to in (combined_sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain;
Email
| where link has_any (sus_domains)
// 2023-05-06T08:33:13Z

// Q7 -(ADVANCED) How many unique domains are associated with this threat actor? 
// Sigh.. the above query where distinct domain.

// Q8 - (ADVANCED) How many malware files placed by the threat actor are still present across all of the Dai Wok host machines? 
let sus_senders = dynamic([
    "restaurant@verizon.com",
    "miguel_waters@hoisumsupplies.com"
]);
let other_sus_senders =
Email
| where sender in (sus_senders) or reply_to in (sus_senders)
| distinct sender;
let more_sus_senders =
Email
| where sender in (other_sus_senders) or reply_to in (other_sus_senders)
| distinct sender;
let final_sus =
Email
| where sender in (more_sus_senders) or reply_to in (more_sus_senders)
| distinct sender, reply_to;
let combined_sus_senders =
final_sus
| project Suspect = sender
| union (final_sus | project Suspect = reply_to)
| distinct Suspect;
let sus_domains =
Email
| where sender in (combined_sus_senders) or reply_to in (combined_sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain;
let sus_files =
Email
| where link has_any (sus_domains)
| extend file = tostring(split(link, "/")[-1])
| distinct file;
let unlucky_hosts =
FileCreationEvents
| where filename  in (sus_files)
| distinct hostname;
let n_files =
FileCreationEvents
| where hostname in (unlucky_hosts)
| order by hostname asc, timestamp asc
| serialize
| extend next_file = next(filename)
| where filename in (sus_files)
| where next_file !in (sus_files)
| distinct next_file;
FileCreationEvents
| where filename in (sus_files) or filename in (n_files)
| distinct path


// Q9 - (ADVANCED) Which threat actor is this publicly reported as?
let sus_senders = dynamic([
    "restaurant@verizon.com",
    "miguel_waters@hoisumsupplies.com"
]);
let other_sus_senders =
Email
| where sender in (sus_senders) or reply_to in (sus_senders)
| distinct sender;
let more_sus_senders =
Email
| where sender in (other_sus_senders) or reply_to in (other_sus_senders)
| distinct sender;
let final_sus =
Email
| where sender in (more_sus_senders) or reply_to in (more_sus_senders)
| distinct sender, reply_to;
let combined_sus_senders =
final_sus
| project Suspect = sender
| union (final_sus | project Suspect = reply_to)
| distinct Suspect;
let sus_domains =
Email
| where sender in (combined_sus_senders) or reply_to in (combined_sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain;
let sus_files =
Email
| where link has_any (sus_domains)
| extend file = tostring(split(link, "/")[-1])
| distinct file;
let unlucky_hosts =
FileCreationEvents
| where filename  in (sus_files)
| distinct hostname;
let n_files =
FileCreationEvents
| where hostname in (unlucky_hosts)
| order by hostname asc, timestamp asc
| serialize
| extend next_file = next(filename)
| where filename in (sus_files)
| where next_file !in (sus_files)
| distinct next_file;
SecurityAlerts
| where description has_any (sus_files) or description has_any (n_files)
// Used the hash found in virus total

// Q10 - (ADVANCED) What is the MITRE ID for the technique used by the threat actor to execute malware payloads? 
// DLL Side-Loading Number on MITRE site

// Q11 - (ADVANCED) What is the SHA256 hash of the file used for the technique found in Q10? 
// Found answer before answer 10
let sus_senders = dynamic([
    "restaurant@verizon.com",
    "miguel_waters@hoisumsupplies.com"
]);
let other_sus_senders =
Email
| where sender in (sus_senders) or reply_to in (sus_senders)
| distinct sender;
let more_sus_senders =
Email
| where sender in (other_sus_senders) or reply_to in (other_sus_senders)
| distinct sender;
let final_sus =
Email
| where sender in (more_sus_senders) or reply_to in (more_sus_senders)
| distinct sender, reply_to;
let combined_sus_senders =
final_sus
| project Suspect = sender
| union (final_sus | project Suspect = reply_to)
| distinct Suspect;
let sus_domains =
Email
| where sender in (combined_sus_senders) or reply_to in (combined_sus_senders)
| extend domain = extract(@"https?://([^/]+)", 1, link)
| distinct domain;
let sus_files =
Email
| where link has_any (sus_domains)
| extend file = tostring(split(link, "/")[-1])
| distinct file;
let unlucky_hosts =
FileCreationEvents
| where filename  in (sus_files)
| distinct hostname;
let n_files =
FileCreationEvents
| where hostname in (unlucky_hosts)
| order by hostname asc, timestamp asc
| serialize
| extend next_file = next(filename)
| where filename in (sus_files)
| where next_file !in (sus_files)
| distinct next_file;
FileCreationEvents
| where filename in (n_files) or filename in (sus_files)
| distinct sha256
// brute force.  6th on the list.
// 4874d336c5c7c2f558cfd5954655cacfc85bcfcb512a45fb0ff461ce9c38b86d

FileCreationEvents
| where sha256 == "4874d336c5c7c2f558cfd5954655cacfc85bcfcb512a45fb0ff461ce9c38b86d"
// cy.exe

// Q12 - (ADVANCED) What legitimate process is being used by the threat actor from what you found for Q10? 
ProcessEvents
| where process_commandline contains "cy.exe"

// Q13 - (ADVANCED) What file was used by the threat actor for Q10 but is no longer found on any of the host machines? 
FileCreationEvents
| where filename == "winutils.dll"
// File not found on any machines and was also in the process_commandline of prev query

// Q14 - What type of attack is this? What will likely happen soon? 
// One word. Starts with R

// Q15 - (ADVANCED) What command line argument did they use to delete things on a host machine? 
// Helped with research
// https://www.sangfor.com/farsight-labs-threat-intelligence/cybersecurity/bablock-rorschach-ransomware
ProcessEvents
| where process_commandline contains "delete"

// Section 4
// Q1
// Easy - Supply chain attack

// Q2 
// wtf -_-
// not task scheduler, windows task sheduler, registry keys, ...
// Scheduled Task 
// I spent days fighting syntax.

// Q3
// Adversary-in-the-Middle

// Q4
// brute force

// Q5
// password spray

// Q6
// wiper

// Q7 
// registry

// Q8
// Command and Control or C2

// Q9
// exfiltration

// Q10 
// base 64

// Q11
// hack and leak

// Q12
// hash

// Q13
// sha256

// Q14
// Attribution

// Q15
// killchain

// Q16 likethecoins

// Q17
// ransomware

// Q18
// extortion

// Q19
// zero day

// Q20
// recon

// Q21
// scanning

// Q22
// WHOIS

// Q23
// drive-by
